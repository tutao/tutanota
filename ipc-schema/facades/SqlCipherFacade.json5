{
	name: "SqlCipherFacade",
	type: "facade",
	senders: ["web"],
	receivers: ["desktop", "android", "ios"],
	methods: {
		openDb: {
			arg: [
				{
					userId: "string",
				},
				{
					dbKey: "bytes",
				},
			],
			ret: "void",
		},
		closeDb: {
			arg: [],
			ret: "void",
		},
		deleteDb: {
			arg: [
				{
					userId: "string",
				},
			],
			ret: "void",
		},
		run: {
			arg: [
				{
					query: "string",
				},
				{
					params: "List<TaggedSqlValue>",
				},
			],
			ret: "void",
		},
		get: {
			doc: "get a single object or null if the query returns nothing",
			arg: [
				{
					query: "string",
				},
				{
					params: "List<TaggedSqlValue>",
				},
			],
			ret: "Map<string, TaggedSqlValue>?",
		},
		all: {
			doc: "return a list of objects or an empty list if the query returns nothing",
			arg: [
				{
					query: "string",
				},
				{
					params: "List<TaggedSqlValue>",
				},
			],
			ret: "List<Map<string, TaggedSqlValue>>",
		},
		lockRangesDbAccess: {
			doc: 'We want to lock the access to the "ranges" db when updating / reading the offline available mail list ranges for each mail list (referenced using the listId)',
			arg: [
				{
					listId: "string",
				},
			],
			ret: "void",
		},
		unlockRangesDbAccess: {
			doc: 'This is the counterpart to the function "lockRangesDbAccess(listId)"',
			arg: [
				{
					listId: "string",
				},
			],
			ret: "void",
		},
	},
}
