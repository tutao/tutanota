plugins {
	id 'com.android.application'
	id 'kotlin-android'
	id "org.jetbrains.kotlin.kapt"
	id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.21'
}

android {
	compileSdkVersion 31
	defaultConfig {
		applicationId "de.tutao.tutanota"
		minSdkVersion 23
		targetSdkVersion 31
		versionCode 396188
		versionName "3.109.3"
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

		javaCompileOptions {
			annotationProcessorOptions {
				arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
			}
		}
	}
	signingConfigs {
		release {
			// Provide non-empty placeholders because otherwise configuration will braek even in debug.
			storeFile file(System.getenv("APK_SIGN_STORE") ?: 'EMPTY')
			storePassword System.getenv("APK_SIGN_STORE_PASS" ?: 'EMPTY')
			keyAlias System.getenv("APK_SIGN_ALIAS" ?: 'EMPTY')
			keyPassword System.getenv("APK_SIGN_KEY_PASS" ?: 'EMPTY')

			enableV1Signing = true
			enableV2Signing = true
		}
	}
	flavorDimensions 'releaseType'
	productFlavors {
		tutao {
			signingConfig signingConfigs.release
		}
		fdroid {
		}
	}
	buildTypes {
		debug {
			manifestPlaceholders = [contentProviderAuthority: 'de.tutao.fileprovider.debug']
			buildConfigField 'String', 'RES_ADDRESS', "\"tutanota\""
			applicationIdSuffix ".debug"
		}
		debugDist {
			initWith debug
			manifestPlaceholders = [contentProviderAuthority: 'de.tutao.fileprovider.debugdist']
			buildConfigField 'String', 'RES_ADDRESS', "\"tutanota/dist\""
			applicationIdSuffix ".debugdist"
		}
		releaseTest {
			initWith release
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			manifestPlaceholders = [contentProviderAuthority: 'de.tutao.fileprovider.test']
			buildConfigField 'String', 'RES_ADDRESS', "\"tutanota/dist\""
			applicationIdSuffix ".test"
		}
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			manifestPlaceholders = [contentProviderAuthority: 'de.tutao.fileprovider']
			buildConfigField 'String', 'RES_ADDRESS', "\"tutanota/dist\""
		}
	}

	applicationVariants.all { variant ->
		variant.outputs.all { output ->
			def flavor = variant.productFlavors[0].name
			outputFileName = "tutanota-$flavor-${variant.buildType.name}-${variant.versionName}.apk"
		}
	}

	buildTypes.each {
		it.buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', '"' + it.manifestPlaceholders['contentProviderAuthority'] + '"'
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
	packagingOptions {
		resources {
			excludes += ['META-INF/LICENSE', 'META-INF/ASL2.0']
		}
	}
	lint {
		disable 'MissingTranslation'
	}

	namespace 'de.tutao.tutanota'
}

tasks.withType(Test) {
	testLogging {
		exceptionFormat "full"
		events "started", "skipped", "passed", "failed"
		showStandardStreams true
	}
}

dependencies {
	def room_version = "2.4.2"
	def lifecycle_version = "2.4.1"
	def activity_version = "1.4.0"

	// Important: cannot be updated without additional measures as Android 6 and 7 do not have Java 9
	//noinspection GradleDependency
	implementation 'commons-io:commons-io:2.5'

	implementation 'androidx.core:core-ktx:1.8.0'
	implementation "androidx.activity:activity-ktx:$activity_version"
	implementation "androidx.browser:browser:1.3.0"
	implementation "androidx.biometric:biometric:1.1.0"

	if (file("../libs/android-database-sqlcipher-4.5.0.aar").exists()) {
		implementation fileTree(include: ['*.aar'], dir: '../libs')
	} else {
		implementation "net.zetetic:android-database-sqlcipher:4.5.0"
	}
	implementation "androidx.sqlite:sqlite:2.0.1"

	implementation "androidx.room:room-runtime:$room_version"
	// For Kotlin use kapt instead of annotationProcessor
	kapt "androidx.room:room-compiler:$room_version"

	if (file("../libs/android-database-sqlcipher-4.5.0.aar").exists()) {
		implementation fileTree(include: ['*.aar'], dir: '../libs')
	} else {
		implementation "net.zetetic:android-database-sqlcipher:4.5.0"
	}
	implementation "androidx.sqlite:sqlite:2.0.1"

	implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
	implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

	implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1"
	implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'

	testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
	testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
	testImplementation 'junit:junit:4.13.2'
	testImplementation "org.robolectric:robolectric:4.8.1"
	testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"

	androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
	androidTestImplementation 'androidx.test:runner:1.4.0'
	androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
	androidTestImplementation 'androidx.test:rules:1.4.0'
	androidTestImplementation "org.mockito:mockito-android:4.5.1"
	androidTestImplementation 'org.codehaus.jackson:jackson-mapper-asl:1.9.2'
}
